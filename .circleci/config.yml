# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1
general:
  branches:
    only:
      - master
      - develop
      - /^test.*/
jobs:
  build:
    working_directory: ~/circleci-demo-python-django
    docker:
      - image: circleci/python:3.6.4
      - image: circleci/mysql:5.7
        command: |
          mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
        environment:
          MYSQL_DATABASE: circle_test
          MYSQL_USER: root
          MYSQL_ROOT_HOST: "%"
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
    steps:
      # リポジトリのコードを working_directory にチェックアウト
      - checkout

      # requirements.txtに変更がなければ、以前作成したPython仮想環境を復元
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # 現在のrequirements.txtに基づきPython仮想環境を作成または更新
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      # Python仮想環境を保管
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # dockerizeのインストール
      - run:
          name: install dockerize
          command: |
            [ ! -f /usr/local/bin/dockerize ] && wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            true
          environment:
            DOCKERIZE_VERSION: v0.5.0

      # mysqlコンテナの起動待機
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: initialize db
          command: |
            . venv/bin/activate
            python manage.py makemigrations 
            python manage.py migrate        
      - run:
          command: |
            python manage.py behave
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1
